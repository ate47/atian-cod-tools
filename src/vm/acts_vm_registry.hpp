#pragma once

namespace acts::vm::opcodes {
	enum OpCodeId : uint8_t {
		// dev operators
		OPCODE_ABORT = 0,
		OPCODE_NOP = 1,

		// base operators
		OPCODE_EXPORT_NO_PARAMS = 0x10,
		OPCODE_EXPORT_PARAMS = 0x11,
		OPCODE_END = 0x12,
		OPCODE_RETURN = 0x13,
		OPCODE_IS_DEFINED = 0x14,
		OPCODE_DEC_TOP = 0x15,
		OPCODE_GET_FUNCTION = 0x16,
		OPCODE_GET_BUILTIN_FUNCTION = 0x17,
		OPCODE_CALL_FUNCTION = 0x18,
		OPCODE_CALL_METHOD = 0x19,
		OPCODE_CALL_BUILTIN_FUNCTION = 0x1a,
		OPCODE_CALL_BUILTIN_METHOD = 0x1b,
		OPCODE_PRE_CALL = 0x1c,
		OPCODE_REGISTER_VARS = 0x1d,

		// jump
		OPCODE_JUMP = 0x20,
		OPCODE_DEV_BLOCK = 0x21,
		OPCODE_JUMP_IF_TRUE = 0x22,
		OPCODE_JUMP_IF_FALSE = 0x23,
		OPCODE_JUMP_IF_TRUE_EXPR = 0x24,
		OPCODE_JUMP_IF_FALSE_EXPR = 0x25,
		OPCODE_JUMP_IF_DEFINED = 0x26,

		// data getters
		OPCODE_GET_INT = 0x30,
		OPCODE_GET_FLOAT = 0x31,
		OPCODE_GET_HASH = 0x32,
		OPCODE_GET_UNDEFINED = 0x33,
		OPCODE_GET_STRING = 0x35,
		OPCODE_GET_VAR = 0x36,
		OPCODE_GET_VAR_REF = 0x37,
		OPCODE_SET_REF_VALUE = 0x38,

		// ops
		OPCODE_OP_PLUS = 0x50,
		OPCODE_OP_MINUS = 0x51,
		OPCODE_OP_NOT = 0x52,
		OPCODE_OP_MULTIPLY = 0x53,
		OPCODE_OP_DIVIDE = 0x54,
		OPCODE_OP_MODULUS = 0x55,
		OPCODE_OP_BIT_XOR = 0x56,
		OPCODE_OP_BIT_OR = 0x57,
		OPCODE_OP_BIT_AND = 0x58,
		OPCODE_OP_BIT_NOT = 0x59,
		OPCODE_OP_BIT_SHIFT_LEFT = 0x5a,
		OPCODE_OP_BIT_SHIFT_RIGHT = 0x5b,
		OPCODE_OP_LOWER_THAN = 0x5c,
		OPCODE_OP_GREATER_THAN = 0x5d,
		OPCODE_OP_LOWER_OR_EQUAL_THAN = 0x5e,
		OPCODE_OP_GREATER_OR_EQUAL_THAN = 0x5f,
		OPCODE_OP_LOWER_OR_SUPER_EQUAL_THAN = 0x60,
		OPCODE_OP_GREATER_OR_SUPER_EQUAL_THAN = 0x61,
		OPCODE_OP_EQUAL = 0x62,
		OPCODE_OP_NOT_EQUAL = 0x63,
		OPCODE_OP_SUPER_EQUAL = 0x64,
		OPCODE_OP_SUPER_NOT_EQUAL = 0x65,
	};
}